// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{METHOD_ELF, METHOD_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::io::Write;

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let current_dir = std::path::PathBuf::from(args[1].clone());

    // INPUT //

    let env = ExecutorEnv::builder().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, METHOD_ELF).unwrap().receipt;

    receipt.verify(METHOD_ID).unwrap();

    // OUTPUT //

    let serialized = bincode::serialize(&receipt).unwrap();

    //TODO(pat): remove expects
    std::fs::create_dir_all(current_dir.join("proof_data/risc0")).expect("Failed to create proof_data/sp1");
    let mut proof_file =
        std::fs::File::create(&current_dir.join("proof_data/risc0/risc0.proof")).expect("Failed to create SP1 elf file");
    let mut image_id_file =
        std::fs::File::create(&current_dir.join("proof_data/risc0/risc0.imageid")).expect("Failed to create SP1 elf file");
    let mut public_input_file =
        std::fs::File::create(&current_dir.join("proof_data/risc0/risc0_pub_input.pub")).expect("Failed to create SP1 elf file");
    proof_file
        .write_all(&serialized)
        .expect("Failed write Risc0 proof to file");
    image_id_file
        .write_all(&convert(&METHOD_ID))
        .expect("Failed write Risc0 image id to file");
    public_input_file
        .write_all(&receipt.journal.bytes)
        .expect("Failed write Risc0 image id to file");
}

pub fn convert(data: &[u32; 8]) -> [u8; 32] {
    let mut res = [0; 32];
    for i in 0..8 {
        res[4 * i..4 * (i + 1)].copy_from_slice(&data[i].to_le_bytes());
    }
    res
}
